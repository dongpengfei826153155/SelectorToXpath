Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> result
Rule 1     result -> expression
Rule 2     result -> COMMENT
Rule 3     attr -> [ NAME ]
Rule 4     attr -> [ NAME VALUE ]
Rule 5     attr -> [ NAME VALUE ] [ NAME VALUE ]
Rule 6     attr -> [ NAME * VALUE ]
Rule 7     attr -> [ NAME ^ VALUE ]
Rule 8     attr -> [ NAME $ VALUE ]
Rule 9     attr -> # NAME
Rule 10    attr -> . NAME
Rule 11    expression -> NAME attr
Rule 12    expression -> attr
Rule 13    expression -> * attr
Rule 14    expression -> NAME
Rule 15    expression -> expression expression
Rule 16    expression -> expression > expression
Rule 17    expression -> expression <
Rule 18    expression -> expression PARENT expression
Rule 19    expression -> expression + expression
Rule 20    expression -> expression : NAME ( expression )
Rule 21    expression -> expression : NAME
Rule 22    expression -> expression ^ = expression

Terminals, with rules where they appear

#                    : 9
$                    : 8
(                    : 20
)                    : 20
*                    : 6 13
+                    : 19
.                    : 10
:                    : 20 21
<                    : 17
=                    : 22
>                    : 16
COMMENT              : 2
NAME                 : 3 4 5 5 6 7 8 9 10 11 14 20 21
PARENT               : 18
VALUE                : 4 5 5 6 7 8
[                    : 3 4 5 5 6 7 8
]                    : 3 4 5 5 6 7 8
^                    : 7 22
error                : 

Nonterminals, with rules where they appear

attr                 : 11 12 13
expression           : 1 15 15 16 16 17 18 18 19 19 20 20 21 22 22
result               : 0

Parsing method: LALR

state 0

    (0) S' -> . result
    (1) result -> . expression
    (2) result -> . COMMENT
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    COMMENT         shift and go to state 3
    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    result                         shift and go to state 1
    expression                     shift and go to state 2
    attr                           shift and go to state 5

state 1

    (0) S' -> result .



state 2

    (1) result -> expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    $end            reduce using rule 1 (result -> expression .)
    >               shift and go to state 11
    <               shift and go to state 12
    PARENT          shift and go to state 13
    +               shift and go to state 14
    :               shift and go to state 15
    ^               shift and go to state 16
    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 3

    (2) result -> COMMENT .

    $end            reduce using rule 2 (result -> COMMENT .)


state 4

    (11) expression -> NAME . attr
    (14) expression -> NAME .
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    >               reduce using rule 14 (expression -> NAME .)
    <               reduce using rule 14 (expression -> NAME .)
    PARENT          reduce using rule 14 (expression -> NAME .)
    +               reduce using rule 14 (expression -> NAME .)
    :               reduce using rule 14 (expression -> NAME .)
    ^               reduce using rule 14 (expression -> NAME .)
    NAME            reduce using rule 14 (expression -> NAME .)
    *               reduce using rule 14 (expression -> NAME .)
    $end            reduce using rule 14 (expression -> NAME .)
    )               reduce using rule 14 (expression -> NAME .)
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

  ! [               [ reduce using rule 14 (expression -> NAME .) ]
  ! #               [ reduce using rule 14 (expression -> NAME .) ]
  ! .               [ reduce using rule 14 (expression -> NAME .) ]

    attr                           shift and go to state 17

state 5

    (12) expression -> attr .

    >               reduce using rule 12 (expression -> attr .)
    <               reduce using rule 12 (expression -> attr .)
    PARENT          reduce using rule 12 (expression -> attr .)
    +               reduce using rule 12 (expression -> attr .)
    :               reduce using rule 12 (expression -> attr .)
    ^               reduce using rule 12 (expression -> attr .)
    NAME            reduce using rule 12 (expression -> attr .)
    *               reduce using rule 12 (expression -> attr .)
    [               reduce using rule 12 (expression -> attr .)
    #               reduce using rule 12 (expression -> attr .)
    .               reduce using rule 12 (expression -> attr .)
    $end            reduce using rule 12 (expression -> attr .)
    )               reduce using rule 12 (expression -> attr .)


state 6

    (13) expression -> * . attr
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    attr                           shift and go to state 18

state 7

    (3) attr -> [ . NAME ]
    (4) attr -> [ . NAME VALUE ]
    (5) attr -> [ . NAME VALUE ] [ NAME VALUE ]
    (6) attr -> [ . NAME * VALUE ]
    (7) attr -> [ . NAME ^ VALUE ]
    (8) attr -> [ . NAME $ VALUE ]

    NAME            shift and go to state 19


state 8

    (9) attr -> # . NAME

    NAME            shift and go to state 20


state 9

    (10) attr -> . . NAME

    NAME            shift and go to state 21


state 10

    (15) expression -> expression expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    >               reduce using rule 15 (expression -> expression expression .)
    <               reduce using rule 15 (expression -> expression expression .)
    PARENT          reduce using rule 15 (expression -> expression expression .)
    :               reduce using rule 15 (expression -> expression expression .)
    ^               reduce using rule 15 (expression -> expression expression .)
    NAME            reduce using rule 15 (expression -> expression expression .)
    *               reduce using rule 15 (expression -> expression expression .)
    $end            reduce using rule 15 (expression -> expression expression .)
    )               reduce using rule 15 (expression -> expression expression .)
    +               shift and go to state 14
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

  ! +               [ reduce using rule 15 (expression -> expression expression .) ]
  ! [               [ reduce using rule 15 (expression -> expression expression .) ]
  ! #               [ reduce using rule 15 (expression -> expression expression .) ]
  ! .               [ reduce using rule 15 (expression -> expression expression .) ]
  ! >               [ shift and go to state 11 ]
  ! <               [ shift and go to state 12 ]
  ! PARENT          [ shift and go to state 13 ]
  ! :               [ shift and go to state 15 ]
  ! ^               [ shift and go to state 16 ]
  ! NAME            [ shift and go to state 4 ]
  ! *               [ shift and go to state 6 ]

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 11

    (16) expression -> expression > . expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 22
    attr                           shift and go to state 5

state 12

    (17) expression -> expression < .

    >               reduce using rule 17 (expression -> expression < .)
    <               reduce using rule 17 (expression -> expression < .)
    PARENT          reduce using rule 17 (expression -> expression < .)
    +               reduce using rule 17 (expression -> expression < .)
    :               reduce using rule 17 (expression -> expression < .)
    ^               reduce using rule 17 (expression -> expression < .)
    NAME            reduce using rule 17 (expression -> expression < .)
    *               reduce using rule 17 (expression -> expression < .)
    [               reduce using rule 17 (expression -> expression < .)
    #               reduce using rule 17 (expression -> expression < .)
    .               reduce using rule 17 (expression -> expression < .)
    $end            reduce using rule 17 (expression -> expression < .)
    )               reduce using rule 17 (expression -> expression < .)


state 13

    (18) expression -> expression PARENT . expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 23
    attr                           shift and go to state 5

state 14

    (19) expression -> expression + . expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 24
    attr                           shift and go to state 5

state 15

    (20) expression -> expression : . NAME ( expression )
    (21) expression -> expression : . NAME

    NAME            shift and go to state 25


state 16

    (22) expression -> expression ^ . = expression

    =               shift and go to state 26


state 17

    (11) expression -> NAME attr .

    >               reduce using rule 11 (expression -> NAME attr .)
    <               reduce using rule 11 (expression -> NAME attr .)
    PARENT          reduce using rule 11 (expression -> NAME attr .)
    +               reduce using rule 11 (expression -> NAME attr .)
    :               reduce using rule 11 (expression -> NAME attr .)
    ^               reduce using rule 11 (expression -> NAME attr .)
    NAME            reduce using rule 11 (expression -> NAME attr .)
    *               reduce using rule 11 (expression -> NAME attr .)
    [               reduce using rule 11 (expression -> NAME attr .)
    #               reduce using rule 11 (expression -> NAME attr .)
    .               reduce using rule 11 (expression -> NAME attr .)
    $end            reduce using rule 11 (expression -> NAME attr .)
    )               reduce using rule 11 (expression -> NAME attr .)


state 18

    (13) expression -> * attr .

    >               reduce using rule 13 (expression -> * attr .)
    <               reduce using rule 13 (expression -> * attr .)
    PARENT          reduce using rule 13 (expression -> * attr .)
    +               reduce using rule 13 (expression -> * attr .)
    :               reduce using rule 13 (expression -> * attr .)
    ^               reduce using rule 13 (expression -> * attr .)
    NAME            reduce using rule 13 (expression -> * attr .)
    *               reduce using rule 13 (expression -> * attr .)
    [               reduce using rule 13 (expression -> * attr .)
    #               reduce using rule 13 (expression -> * attr .)
    .               reduce using rule 13 (expression -> * attr .)
    $end            reduce using rule 13 (expression -> * attr .)
    )               reduce using rule 13 (expression -> * attr .)


state 19

    (3) attr -> [ NAME . ]
    (4) attr -> [ NAME . VALUE ]
    (5) attr -> [ NAME . VALUE ] [ NAME VALUE ]
    (6) attr -> [ NAME . * VALUE ]
    (7) attr -> [ NAME . ^ VALUE ]
    (8) attr -> [ NAME . $ VALUE ]

    ]               shift and go to state 27
    VALUE           shift and go to state 28
    *               shift and go to state 29
    ^               shift and go to state 30
    $               shift and go to state 31


state 20

    (9) attr -> # NAME .

    >               reduce using rule 9 (attr -> # NAME .)
    <               reduce using rule 9 (attr -> # NAME .)
    PARENT          reduce using rule 9 (attr -> # NAME .)
    +               reduce using rule 9 (attr -> # NAME .)
    :               reduce using rule 9 (attr -> # NAME .)
    ^               reduce using rule 9 (attr -> # NAME .)
    NAME            reduce using rule 9 (attr -> # NAME .)
    *               reduce using rule 9 (attr -> # NAME .)
    [               reduce using rule 9 (attr -> # NAME .)
    #               reduce using rule 9 (attr -> # NAME .)
    .               reduce using rule 9 (attr -> # NAME .)
    $end            reduce using rule 9 (attr -> # NAME .)
    )               reduce using rule 9 (attr -> # NAME .)


state 21

    (10) attr -> . NAME .

    >               reduce using rule 10 (attr -> . NAME .)
    <               reduce using rule 10 (attr -> . NAME .)
    PARENT          reduce using rule 10 (attr -> . NAME .)
    +               reduce using rule 10 (attr -> . NAME .)
    :               reduce using rule 10 (attr -> . NAME .)
    ^               reduce using rule 10 (attr -> . NAME .)
    NAME            reduce using rule 10 (attr -> . NAME .)
    *               reduce using rule 10 (attr -> . NAME .)
    [               reduce using rule 10 (attr -> . NAME .)
    #               reduce using rule 10 (attr -> . NAME .)
    .               reduce using rule 10 (attr -> . NAME .)
    $end            reduce using rule 10 (attr -> . NAME .)
    )               reduce using rule 10 (attr -> . NAME .)


state 22

    (16) expression -> expression > expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    >               reduce using rule 16 (expression -> expression > expression .)
    <               reduce using rule 16 (expression -> expression > expression .)
    PARENT          reduce using rule 16 (expression -> expression > expression .)
    :               reduce using rule 16 (expression -> expression > expression .)
    ^               reduce using rule 16 (expression -> expression > expression .)
    NAME            reduce using rule 16 (expression -> expression > expression .)
    *               reduce using rule 16 (expression -> expression > expression .)
    $end            reduce using rule 16 (expression -> expression > expression .)
    )               reduce using rule 16 (expression -> expression > expression .)
    +               shift and go to state 14
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

  ! +               [ reduce using rule 16 (expression -> expression > expression .) ]
  ! [               [ reduce using rule 16 (expression -> expression > expression .) ]
  ! #               [ reduce using rule 16 (expression -> expression > expression .) ]
  ! .               [ reduce using rule 16 (expression -> expression > expression .) ]
  ! >               [ shift and go to state 11 ]
  ! <               [ shift and go to state 12 ]
  ! PARENT          [ shift and go to state 13 ]
  ! :               [ shift and go to state 15 ]
  ! ^               [ shift and go to state 16 ]
  ! NAME            [ shift and go to state 4 ]
  ! *               [ shift and go to state 6 ]

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 23

    (18) expression -> expression PARENT expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    >               reduce using rule 18 (expression -> expression PARENT expression .)
    <               reduce using rule 18 (expression -> expression PARENT expression .)
    PARENT          reduce using rule 18 (expression -> expression PARENT expression .)
    :               reduce using rule 18 (expression -> expression PARENT expression .)
    ^               reduce using rule 18 (expression -> expression PARENT expression .)
    NAME            reduce using rule 18 (expression -> expression PARENT expression .)
    *               reduce using rule 18 (expression -> expression PARENT expression .)
    $end            reduce using rule 18 (expression -> expression PARENT expression .)
    )               reduce using rule 18 (expression -> expression PARENT expression .)
    +               shift and go to state 14
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

  ! +               [ reduce using rule 18 (expression -> expression PARENT expression .) ]
  ! [               [ reduce using rule 18 (expression -> expression PARENT expression .) ]
  ! #               [ reduce using rule 18 (expression -> expression PARENT expression .) ]
  ! .               [ reduce using rule 18 (expression -> expression PARENT expression .) ]
  ! >               [ shift and go to state 11 ]
  ! <               [ shift and go to state 12 ]
  ! PARENT          [ shift and go to state 13 ]
  ! :               [ shift and go to state 15 ]
  ! ^               [ shift and go to state 16 ]
  ! NAME            [ shift and go to state 4 ]
  ! *               [ shift and go to state 6 ]

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 24

    (19) expression -> expression + expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    >               reduce using rule 19 (expression -> expression + expression .)
    <               reduce using rule 19 (expression -> expression + expression .)
    PARENT          reduce using rule 19 (expression -> expression + expression .)
    :               reduce using rule 19 (expression -> expression + expression .)
    ^               reduce using rule 19 (expression -> expression + expression .)
    NAME            reduce using rule 19 (expression -> expression + expression .)
    *               reduce using rule 19 (expression -> expression + expression .)
    [               reduce using rule 19 (expression -> expression + expression .)
    #               reduce using rule 19 (expression -> expression + expression .)
    .               reduce using rule 19 (expression -> expression + expression .)
    $end            reduce using rule 19 (expression -> expression + expression .)
    )               reduce using rule 19 (expression -> expression + expression .)
    +               shift and go to state 14

  ! +               [ reduce using rule 19 (expression -> expression + expression .) ]
  ! >               [ shift and go to state 11 ]
  ! <               [ shift and go to state 12 ]
  ! PARENT          [ shift and go to state 13 ]
  ! :               [ shift and go to state 15 ]
  ! ^               [ shift and go to state 16 ]
  ! NAME            [ shift and go to state 4 ]
  ! *               [ shift and go to state 6 ]
  ! [               [ shift and go to state 7 ]
  ! #               [ shift and go to state 8 ]
  ! .               [ shift and go to state 9 ]

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 25

    (20) expression -> expression : NAME . ( expression )
    (21) expression -> expression : NAME .

    (               shift and go to state 32
    >               reduce using rule 21 (expression -> expression : NAME .)
    <               reduce using rule 21 (expression -> expression : NAME .)
    PARENT          reduce using rule 21 (expression -> expression : NAME .)
    +               reduce using rule 21 (expression -> expression : NAME .)
    :               reduce using rule 21 (expression -> expression : NAME .)
    ^               reduce using rule 21 (expression -> expression : NAME .)
    NAME            reduce using rule 21 (expression -> expression : NAME .)
    *               reduce using rule 21 (expression -> expression : NAME .)
    [               reduce using rule 21 (expression -> expression : NAME .)
    #               reduce using rule 21 (expression -> expression : NAME .)
    .               reduce using rule 21 (expression -> expression : NAME .)
    $end            reduce using rule 21 (expression -> expression : NAME .)
    )               reduce using rule 21 (expression -> expression : NAME .)


state 26

    (22) expression -> expression ^ = . expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 33
    attr                           shift and go to state 5

state 27

    (3) attr -> [ NAME ] .

    >               reduce using rule 3 (attr -> [ NAME ] .)
    <               reduce using rule 3 (attr -> [ NAME ] .)
    PARENT          reduce using rule 3 (attr -> [ NAME ] .)
    +               reduce using rule 3 (attr -> [ NAME ] .)
    :               reduce using rule 3 (attr -> [ NAME ] .)
    ^               reduce using rule 3 (attr -> [ NAME ] .)
    NAME            reduce using rule 3 (attr -> [ NAME ] .)
    *               reduce using rule 3 (attr -> [ NAME ] .)
    [               reduce using rule 3 (attr -> [ NAME ] .)
    #               reduce using rule 3 (attr -> [ NAME ] .)
    .               reduce using rule 3 (attr -> [ NAME ] .)
    $end            reduce using rule 3 (attr -> [ NAME ] .)
    )               reduce using rule 3 (attr -> [ NAME ] .)


state 28

    (4) attr -> [ NAME VALUE . ]
    (5) attr -> [ NAME VALUE . ] [ NAME VALUE ]

    ]               shift and go to state 34


state 29

    (6) attr -> [ NAME * . VALUE ]

    VALUE           shift and go to state 35


state 30

    (7) attr -> [ NAME ^ . VALUE ]

    VALUE           shift and go to state 36


state 31

    (8) attr -> [ NAME $ . VALUE ]

    VALUE           shift and go to state 37


state 32

    (20) expression -> expression : NAME ( . expression )
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 38
    attr                           shift and go to state 5

state 33

    (22) expression -> expression ^ = expression .
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for PARENT resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for : resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for # resolved as shift
  ! shift/reduce conflict for . resolved as shift
    $end            reduce using rule 22 (expression -> expression ^ = expression .)
    )               reduce using rule 22 (expression -> expression ^ = expression .)
    >               shift and go to state 11
    <               shift and go to state 12
    PARENT          shift and go to state 13
    +               shift and go to state 14
    :               shift and go to state 15
    ^               shift and go to state 16
    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

  ! >               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! <               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! PARENT          [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! +               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! :               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! ^               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! NAME            [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! *               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! [               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! #               [ reduce using rule 22 (expression -> expression ^ = expression .) ]
  ! .               [ reduce using rule 22 (expression -> expression ^ = expression .) ]

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 34

    (4) attr -> [ NAME VALUE ] .
    (5) attr -> [ NAME VALUE ] . [ NAME VALUE ]

  ! shift/reduce conflict for [ resolved as shift
    >               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    <               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    PARENT          reduce using rule 4 (attr -> [ NAME VALUE ] .)
    +               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    :               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    ^               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    NAME            reduce using rule 4 (attr -> [ NAME VALUE ] .)
    *               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    #               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    .               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    $end            reduce using rule 4 (attr -> [ NAME VALUE ] .)
    )               reduce using rule 4 (attr -> [ NAME VALUE ] .)
    [               shift and go to state 39

  ! [               [ reduce using rule 4 (attr -> [ NAME VALUE ] .) ]


state 35

    (6) attr -> [ NAME * VALUE . ]

    ]               shift and go to state 40


state 36

    (7) attr -> [ NAME ^ VALUE . ]

    ]               shift and go to state 41


state 37

    (8) attr -> [ NAME $ VALUE . ]

    ]               shift and go to state 42


state 38

    (20) expression -> expression : NAME ( expression . )
    (15) expression -> expression . expression
    (16) expression -> expression . > expression
    (17) expression -> expression . <
    (18) expression -> expression . PARENT expression
    (19) expression -> expression . + expression
    (20) expression -> expression . : NAME ( expression )
    (21) expression -> expression . : NAME
    (22) expression -> expression . ^ = expression
    (11) expression -> . NAME attr
    (12) expression -> . attr
    (13) expression -> . * attr
    (14) expression -> . NAME
    (15) expression -> . expression expression
    (16) expression -> . expression > expression
    (17) expression -> . expression <
    (18) expression -> . expression PARENT expression
    (19) expression -> . expression + expression
    (20) expression -> . expression : NAME ( expression )
    (21) expression -> . expression : NAME
    (22) expression -> . expression ^ = expression
    (3) attr -> . [ NAME ]
    (4) attr -> . [ NAME VALUE ]
    (5) attr -> . [ NAME VALUE ] [ NAME VALUE ]
    (6) attr -> . [ NAME * VALUE ]
    (7) attr -> . [ NAME ^ VALUE ]
    (8) attr -> . [ NAME $ VALUE ]
    (9) attr -> . # NAME
    (10) attr -> . . NAME

    )               shift and go to state 43
    >               shift and go to state 11
    <               shift and go to state 12
    PARENT          shift and go to state 13
    +               shift and go to state 14
    :               shift and go to state 15
    ^               shift and go to state 16
    NAME            shift and go to state 4
    *               shift and go to state 6
    [               shift and go to state 7
    #               shift and go to state 8
    .               shift and go to state 9

    expression                     shift and go to state 10
    attr                           shift and go to state 5

state 39

    (5) attr -> [ NAME VALUE ] [ . NAME VALUE ]

    NAME            shift and go to state 44


state 40

    (6) attr -> [ NAME * VALUE ] .

    >               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    <               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    PARENT          reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    +               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    :               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    ^               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    NAME            reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    *               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    [               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    #               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    .               reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    $end            reduce using rule 6 (attr -> [ NAME * VALUE ] .)
    )               reduce using rule 6 (attr -> [ NAME * VALUE ] .)


state 41

    (7) attr -> [ NAME ^ VALUE ] .

    >               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    <               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    PARENT          reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    +               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    :               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    ^               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    NAME            reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    *               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    [               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    #               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    .               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    $end            reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)
    )               reduce using rule 7 (attr -> [ NAME ^ VALUE ] .)


state 42

    (8) attr -> [ NAME $ VALUE ] .

    >               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    <               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    PARENT          reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    +               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    :               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    ^               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    NAME            reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    *               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    [               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    #               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    .               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    $end            reduce using rule 8 (attr -> [ NAME $ VALUE ] .)
    )               reduce using rule 8 (attr -> [ NAME $ VALUE ] .)


state 43

    (20) expression -> expression : NAME ( expression ) .

    >               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    <               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    PARENT          reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    +               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    :               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    ^               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    NAME            reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    *               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    [               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    #               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    .               reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    $end            reduce using rule 20 (expression -> expression : NAME ( expression ) .)
    )               reduce using rule 20 (expression -> expression : NAME ( expression ) .)


state 44

    (5) attr -> [ NAME VALUE ] [ NAME . VALUE ]

    VALUE           shift and go to state 45


state 45

    (5) attr -> [ NAME VALUE ] [ NAME VALUE . ]

    ]               shift and go to state 46


state 46

    (5) attr -> [ NAME VALUE ] [ NAME VALUE ] .

    >               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    <               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    PARENT          reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    +               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    :               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    ^               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    NAME            reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    *               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    [               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    #               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    .               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    $end            reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)
    )               reduce using rule 5 (attr -> [ NAME VALUE ] [ NAME VALUE ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for > in state 33 resolved as shift
WARNING: shift/reduce conflict for < in state 33 resolved as shift
WARNING: shift/reduce conflict for PARENT in state 33 resolved as shift
WARNING: shift/reduce conflict for + in state 33 resolved as shift
WARNING: shift/reduce conflict for : in state 33 resolved as shift
WARNING: shift/reduce conflict for ^ in state 33 resolved as shift
WARNING: shift/reduce conflict for NAME in state 33 resolved as shift
WARNING: shift/reduce conflict for * in state 33 resolved as shift
WARNING: shift/reduce conflict for [ in state 33 resolved as shift
WARNING: shift/reduce conflict for # in state 33 resolved as shift
WARNING: shift/reduce conflict for . in state 33 resolved as shift
WARNING: shift/reduce conflict for [ in state 34 resolved as shift
